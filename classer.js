"use strict";


/**
 * Main entry point
 */

if (typeof module === "undefined" || !module || typeof module.exports === "undefined") {
  window.Classer = makeClass;
}
else {
  module.exports = exports = makeClass;
  exports.create = makeClass;
}


/**
 * Make a class with the given property descriptors.
 *
 * @param  {Object}   descriptors An object containing the property descriptors for the class.
 * @return {Function}             The created class.
 */
function makeClass (descriptors) {
  descriptors = descriptors || {};

  var Class = function (config) {
    if (!(this instanceof Class)) {
      return new Class(config);
    }
    if (config) {
      this.configure(config);
    }
  };

  makePrototype(descriptors, Class);
  makeStatic(descriptors, Class);


  return Class;
}

/**
 * Define a property.
 *
 * @param  {Object} descriptors The list of descriptors to add this one to.
 * @param  {Object} subject     The subject to add the property to.
 * @param  {String} name        The name of the property.
 * @param  {Object} descriptor  The property descriptor.
 */
function defineProperty (descriptors, subject, name, descriptor) {
  descriptor = descriptor || {value: null};
  if (typeof descriptor === 'function') {
    // this is a method
    descriptor = {
      enumerable: false,
      configurable: true,
      writable: true,
      value: descriptor
    };
  }

  if (descriptor.value === undefined && !(descriptor.get || descriptor.set)) {
    descriptor.value = null;
  }

  if (descriptor.writable == null && descriptor.value !== undefined) {
    descriptor.writable = true;
  }
  if (descriptor.enumerable == null) {
    descriptor.enumerable = true;
  }
  if (descriptor.configurable == null) {
    descriptor.configurable = true;
  }
  descriptors[name] = descriptor;
  Object.defineProperty(subject, name, descriptor);
}

/**
 * Make the static methods for a class.
 *
 * @param  {Object}   descriptors  The property descriptors for the class.
 * @param  {Function} Class        The class itself.
 */
function makeStatic (descriptors, Class) {
  Object.defineProperties(Class, {
    /**
     * Create a new instance of the class.
     */
    create: {
      configurable: true,
      value: function (properties) {
        return new Class(properties);
      }
    },
    /**
     * Get the descriptors of the class.
     */
    descriptors: {
      value: descriptors
    },
    /**
     * Define a new property on the class.
     */
    defineProperty: {
      configurable: true,
      value: function (name, descriptor) {
        defineProperty(descriptors, this.prototype, name, descriptor);
        if (!this.prototype.configure || this.prototype.configure.isAutoGenerated) {
          this.prototype.configure = makeConfigure(descriptors);
        }
        if (!this.prototype.toJSON || this.prototype.toJSON.isAutoGenerated) {
          this.prototype.toJSON = makeToJSON(descriptors);
        }
        return this;
      }
    },
    /**
     * Define a list of properties on the class.
     */
    defineProperties: {
      configurable: true,
      value: function (items) {
        if (!items) {
          return this;
        }
        var keys = Object.keys(items),
            total = keys.length,
            key, i;

        for (i = 0; i < total; i++) {
          key = keys[i];
          defineProperty(descriptors, this.prototype, key, items[key]);
        }
        if (!this.prototype.configure || this.prototype.configure.isAutoGenerated) {
          this.prototype.configure = makeConfigure(descriptors);
        }
        if (!this.prototype.toJSON || this.prototype.toJSON.isAutoGenerated) {
          this.prototype.toJSON = makeToJSON(descriptors);
        }
        return this;
      }
    },
    /**
     * Inherit descriptors from another class.
     */
    inherits: {
      configurable: true,
      value: function (Super) {
        var keys = Object.keys(Super),
            total = keys.length,
            key, i;


        for (i = 0; i < total; i++) {
          key = keys[i];
          if (!this.hasOwnProperty(key)) {
            this[key] = Super[key];
          }
        }
        var superDescriptors = Super.descriptors || {};
        keys = Object.keys(superDescriptors);
        total = keys.length;
        for (i = 0; i < total; i++) {
          key = keys[i];
          if (!descriptors.hasOwnProperty(key)) {
            descriptors[key] = superDescriptors[key];
          }
        }
        descriptors.super = {
          enumerable: false,
          value: Super.prototype
        };
        this.prototype = Object.create(Super.prototype, descriptors);
        this.prototype.constructor = this;

        if (!this.prototype.configure || this.prototype.configure.isAutoGenerated) {
          this.prototype.configure = makeConfigure(descriptors);
        }
        if (!this.prototype.toJSON || this.prototype.toJSON.isAutoGenerated) {
          this.prototype.toJSON = makeToJSON(descriptors);
        }

        return this;
      }
    },
    /**
     * Create a new class which extends from this one.
     */
    extend: {
      configurable: true,
      value: function (config) {
        var Child = makeClass(config);
        Child.inherits(this);
        return Child;
      }
    },
    /**
     * Mix the properties from a source object into this one.
     * @type {Object}
     */
    mixin: {
      configurable: true,
      value: function (source) {
        var keys = Object.keys(source),
            total = keys.length,
            combined = {},
            key, i;

        for (i = 0; i < total; i++) {
          key = keys[i];
          combined[key] = {
            value: source[key]
          };
        }
        this.defineProperties(combined);
        return this;
      }
    }
  });
}

/**
 * Make a prototype for a class, based on the given descriptors.
 *
 * @param  {Object} descriptors   The descriptors for the class.
 * @param  {Function} Class       The class itself.
 */
function makePrototype (descriptors, Class) {
  var keys = Object.keys(descriptors),
      total = keys.length,
      key, i;

  for (i = 0; i < total; i++) {
    key = keys[i];
    defineProperty(descriptors, Class.prototype, key, descriptors[key]);
  }

  // don't overwrite custom configure functions if supplied.
  if (!descriptors.configure) {
    Object.defineProperty(Class.prototype, 'configure', {
      configurable: true,
      writable: true,
      value: makeConfigure(descriptors)
    });
  }

  // don't overwrite custom toJSON functions if supplied.
  if (!descriptors.toJSON) {
    Object.defineProperty(Class.prototype, 'toJSON', {
      configurable: true,
      writable: true,
      value: makeToJSON(descriptors)
    });
  }
}

/**
 * Make an efficient `configure()` function to set property values
 * for an object based on the given descriptors.
 *
 * @param  {Object} descriptors The descriptors for the object.
 * @return {Function}           The `configure()` function.
 */
function makeConfigure (descriptors) {
  var keys = Object.keys(descriptors),
      total = keys.length,
      body = '',
      key, descriptor, i;

  for (i = 0; i < total; i++) {
    key = keys[i];
    descriptor = descriptors[key];
    if (descriptor.writable || descriptor.hasOwnProperty('value') || descriptor.hasOwnProperty('set')) {
      if (/^([\w|_|$]+)$/.test(key)) {
        body += 'this.' + key + ' = config.' + key + ' || this.' + key + ';';
      }
      else {
        body += 'this["' + key + '"] = config["' + key + '"] || this["' + key + '"];';
      }
    }
  }
  var configure = new Function('config', body); // jshint ignore:line
  configure.isAutoGenerated = true;
  return configure;
}

/**
 * Make an efficient `toJSON()` function for an object
 * based on the given descriptors.
 *
 * @param  {Object} descriptors The descriptors for the object.
 * @return {Function}           The `toJSON()` function.
 */
function makeToJSON (descriptors) {
  var keys = Object.keys(descriptors),
      total = keys.length,
      parts = [],
      key, descriptor, i;

  for (i = 0; i < total; i++) {
    key = keys[i];
    descriptor = descriptors[key];
    if (descriptor.enumerable || descriptor.enumerable == null) {
      if (/^([\w|_|$]+)$/.test(key)) {
        parts.push(key + ': this.' + key);
      }
      else {
        parts.push('"' + key + '": this["' + key + '"]');
      }
    }
  }
  var toJSON = new Function('return {' + parts.join(',') + '};'); // jshint ignore:line
  toJSON.isAutoGenerated = true;
  return toJSON;
}
